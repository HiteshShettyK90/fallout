cql_iot_yaml: cql-iot.yaml
namespace: cass-operator
cql_iot_cycles: 200k
---
ensemble:
  server:
    node.count: 4
    provisioner:
      name: kind
      properties:
        kind.config: <<file:cass-operator/operator/k8s-flavors/kind/kind-example-config.yaml>>
    configuration_manager:
      - name: kubernetes_manifest
        properties:
          manifest: <<file:cass-operator/operator/k8s-flavors/kind/rancher-local-path-storage.yaml>>
          wait.strategy: FIXED_DURATION
          wait.timeout: 1m
      - name: ds_cass_operator
        properties:
          namespace: {{namespace}}
          operator.manifest: <<file:cass-operator/docs/user/cass-operator-manifests.yaml>>
          datacenter.manifest: <<file:size-templated-dc.yaml>>
          datacenter.template_params:
            size: 3
      - name: nosqlbench
        properties:
          namespace: {{namespace}}
          replicas: 1
      - name: chaos_mesh # deploys into an isolated namespace
    local_files:
      - git:
          repo: https://github.com/datastax/cass-operator
          branch: v1.1.0
      - url: https://raw.githubusercontent.com/datastax/fallout/master/examples/kubernetes/datastax-cass-operator-resources/size-templated-minimal-cass-3.11.6-dc.yaml
        path: size-templated-dc.yaml
      - url: https://raw.githubusercontent.com/datastax/fallout/master/examples/chaos-mesh/resources/pod-chaos.yaml
        path: pod-chaos.yaml
  client: server
workload:
  phases:
    - set_schema:
        module: nosqlbench
        properties:
          num_clients: 1
          args:
            - run
            - type=cql
            - yaml={{cql_iot_yaml}}
            - tags=phase:schema
            - rf=3
    - run_workload:
        module: nosqlbench
        properties:
          cycles: {{cql_iot_cycles}}
          args:
            - run
            - type=cql
            - yaml={{cql_iot_yaml}}
            - tags=phase:main
      pod_failure_chaos:
        module: chaos_mesh
        properties:
          namespace: {{namespace}} # namespace where the chaos experiment should act
          experiment: <<file:pod-chaos.yaml>>
  checkers:
    nofail:
      checker: nofail
  artifact_checkers:
    hdr:
      artifact_checker: hdrtool
